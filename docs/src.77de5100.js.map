{"version":3,"sources":["utils/random.ts","Perceptron.ts","Canvas.ts","utils/loop.ts","utils/map.ts","Point.ts","index.ts"],"names":[],"mappings":";;;;;;;AEIA,ADJA,AIAA,ACAA,AHAa,ACAA,AJAA,IEIb,ADJA,AIAA,ACAA,GHAa,ACAA,AJAA,CGAA,ACAA,AJAA,EEIb,EDJA,AIAA,AFAa,EHAA,CCAb,AIAA,AFAoB,CGApB,CFAa,AJAS,EMAtB,CFA2E,EHA3E,AIAA,CJAA,AIAA,EFAqB,CGArB,CAAA,AHAoB,AHAG,EGAY,CCCjC,AJDoB,CIAqD,CJAvC,CIElC,EJFoB,CIAqD,CJA5B,CIG7C,CHHF,AIAA,CJAA,AIAA,CCAA,CAAA,AFA2E,EAGrE;AFCN,ACHE,ACGG,AJHF,EGAD,MAAM,CAAC,ACGJ,AJHF,IIGM,AJHF,CIGG,AJHF,GIGH,CAAS,EJHX,EIGe,CAAC,GAAL,AJHM,CIGG,CAAT,CJHS,CGArB,ACGwB,CDHK,CHAL,EIGZ,CAAT,AJHF,EIG8B,EJHA,CIG5B,CAAA,CJHF,CGA4B;ADG/B,ADFA,AIAA,ACDA,AHAqC,ACGA,AJHD,CIDvB,AJAA,GCEb,AIAA,ACDA,EDCA,GAAA,EFDqC,CDGrC,AIHA,ELCA,CKDA,CDCA,CAAA,CFDqC,CAAA,CECrC,CAAA,CCDA,CAAA,AHAqC,CAAK,EAAL,CAAA,MGArC,CAAA;AJSE,ADRF,AED6C,GAA3C,QDSA,MAAA,CAAY,KAAZ,EAA2B,MAA3B,EAAyC;AACvC,ADTJ,AICA,ACDA,AHAE,ACIW,EDJX,EECF,ACDA,AHAI,GCIS,CAAA,CFKJ,AGRT,CCDA,CFIa,CHJb,AICA,CCDA,CJSI,AEEU,GFFG,EGRjB,CAAA,ACDA,CAAA,CJSI,EEEW,CAAD,EAAI,MCVlB,ADUc,CCVd,CCDA,AFW0B,CEX1B,IFWc,EAAmB,MAAnB,EAA2B,KAA3B,EAAkC,YAAlC,EAA8C;AFDxD,ADPF,AEFD,ACWC,CDdW,KCcL,GFFC,EDPP,CGSY,GFFV,AEEc,CAAC,CAAC,CFFF,EEEK,CHTrB,CAAY,CAAZ,CCOE,CDPqB,CGSP,KAAgB,KHThC,AGSqC,EHTK,CGSF,MAAxB,CAAD,IAAqC,KAAK,GAAG,MAA7C,IAAuD,MAAtE;AFDE,ADPA,AIDJ,ACFA,IDEM,ACFN,KJUS,ADPA,EIDI,ACFb,GDEgB,ACFhB,CJUI,GAAc,GDPd,AIDJ,ACFA,CAAA,ELGwB,ECOE,CAAC,IIV3B,CAAA,GLGI,KCOc,CAAuB,QAAvB,CAAd;AACA,ADPA,AIDJ,ADSE,ICTI,EDSA,CAAC,EFDE,ADPA,EIDI,GAAG,CHQZ,CAAY,ADPZ,GAAe,AGQjB,EFDE,AGRJ,ADSqB,EHRE,CCOC,IDPL,CCOf,ADPyB,CAAV,CAAf;ACQA,AIVJ,AFWI,IEXE,KJUG,AIVE,EFWA,CEXG,GJUV,AIVJ,CJUgB,CECZ,KFDA,GAAqB,MAArB;AACA,ADRA,AIDJ,ACDA,AFWG,ICVH,ACDM,KJUG,ADRA,AIDT,CCDY,EJUR,CDRS,AKFE,CLED,CCQC,CIVf,CLEiB,CAAb,ECQgB,ADRA,CAAC,GAAG,ECQT,CAAY,EDRE,OAAL,CCQT,ADRsB,CCQC,IAAvB,CAAX,ADRA,EAAyC,CAAC,EAA1C,EAA8C;ACS/C,ADRG,AIFN,ACCA,IAAM,OLCK,IKDM,GLCX,AKDc,CLCD,CAAb,IAAkB,GKDxB,KLCwB,CAAA,MAAA,CAAO,CAAC,CAAR,EAAW,CAAX,CAAlB;AACD,AIHL,ACEA,AFSE,IETI,EFSA,MCXN,ADWY,GAAG,EETI,GAAG,AFSpB,EAAoB,OETtB,EAEA;AJQE,ADRC,AIED,ADME,EFAF,MAAA,CAAA,EGNA,ADMS,KCNT,CAAY,CHMZ,AGNA,ADMS,CFAT,AEAS,CCNsB,CAA/B,EAAgD,KHMhD,AEAS,CAAU,EFAnB,IEAS,EAAkB,IFAjB,CAAV,CEAS,CFAW,CEAe,IFAnC,CEAS,CFA0B,AEAjC,IFAF,EAAqD,MAArD,EAAqE;AAAlC,AGNvB,ACDD,AFQV,GAFD,IENW,CJOwB,AGNvB,ACDD,CDCC,ACDD,AFQJ,GFD4B,AIPG,EDC1B,GHMuB,EGNvB,CAAA,EHMuB,AGNvB,ACD2B,CJOJ,AIPG,EJOH,AIPK;AJOL,ADP3B,AICI,ACDiC,AFS3C,EHTM,ICO2B,AGNvB,CAAA,ECDiC,CJOV,AGNnB,CDQP,CHTD,CCO2B,ADP3B,CCO2B,EIPiB,CAAP,CDC7B,ADQP,CCRO,ADQP,CET+C,ELAhD,CAAA,AKAqC,EDC7B,CAAO,CJDf,AICgB,CAAR,ADQP,CAAU,CHTnB,AIC2B,CAAX,CAAJ,GDQH,EAAkB,GHTd,CAAb,CGSS,CHTa,CGSY,MAAzB,CAAP;AFFiD,ADNjD,AIA2B,ACD8B,AFU1D,CEVU,OLCL,CAAC,GAAG,CAAR,EAAW,OAAO,CAAC,CAAR;AACX,AGSH,CAjBY,UHQF,CAAP;ACMA,ADLD,AIF8B,ACAjC,GLDU,CKCJ,IDA2B,ACAvB,CJOD,AGPwB,ECApB,CJOT,AIPJ,CJOa,CGPoB,KAAA,CAAA,EHO7B,AGP6B,GHOR,KAArB;AACA,AGR6B,ACCpB,MDDoB,CAAA,ACCpB,CAAA,CJOJ,CGR4B,EHQjC,CAAS,CIPA,GAAS,CDDe,CAAA,ECCX,CJOtB,GGRiC,CAAO,CAAC,CAAR,CCCX,CDDsB,ACCtB,CDDW,CAAJ,ICCX,CAAW,KAAX,EAAkB,MAAlB,CAAT;AJQT,ADNF,AIHgD,ACElD,ELCE,EKDI,KJOG,CIPG,EJOR,ADNF,CCMW,ADNX,AKDsB,GJOpB,CAAa,AIPW,CJOV,CAAC,CAAf,EAAkB,ADNpB,AKDsB,CJOD,ADNrB,AKDgC,CJOV,CAApB,CIPoB,CJOG,AIP3B,CLCE,GCME,ADNF,ECM+B,CAA7B,EAAgC,IAAI,CDNhC,GCMoC,CAAC,EAAzC,ADNF,ECM+C,ADNzB,ICMpB;AACA,ADNA,AKDJ,IAAM,ILCE,CCMC,AIPE,ELCA,CCMP,AIPU,CJOD,CDNC,CAAV,CKDc,CJOd,WIPc,CAAA,UAAJ,CAAe,CAAf,EAAkB,KAAlB,CAAd;AJQI,AGVA,ACGJ,IAAI,IJOI,CGVC,ACGA,CDHL,ECGQ,CDHC,ACGb,CJOI,AGVA,EHUY,KAAK,GAAL,CAAS,MAAT;AACb,ADPC,AIHA,ACIJ,GJAE,CIAI,EAAE,GLDC,AIHA,ACIE,CDJP,GJGS,AIHA,ACIE,CLDD,AIHV,GJGa,CAAb,EAAgB,AKCL,CLDM,AKCN,GLDS,EKCb,CAAU,CAAC,CLDO,AKClB,EAAc,KLDD,CAAa,CKCZ,CAAA,CAAA,CAAE,CAAC,CLDxB,AKCqB,CAAd,CLDkC,AKC7C,CLD8C,EAA1C,EAA8C;AAC5C,AIHF,ACIJ,IAAM,ELDA,AKCE,EDJA,CJGC,AKCE,ILDE,AIHA,ACIE,CDJP,GAAS,EJGE,AIHF,CJGG,AIHH,ACIF,CLDI,AIHF,ACIF,CLDF,AIHM,GJGM,CKCd,CDJa,ACIH,CDJJ,ACIN,CDJP,CJG0B,AKCN,CDJI,KAAK,CJGR,AKCD,CLDc,AKCd,CLDC,AKCD,CLDlB,AKCoB,CDJE,ACIJ,CAAb,CAAX,CDJyC,CAAC,CAAd,CAAxB,KACK,KAAK,KAAL,GAAa,CAAb;AHSP,ADNG,AIFF,EHQD,MAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAuB,GAAvB,EAAiC;AAC/B,AILJ,KAAK,IJKI,AILA,CAAC,EJKN,CAAS,AILA,CAAb,EAAgB,CAAC,GAAG,EJKhB,IILsB,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AJMpC,ADPA,AIFF,ACIA,EDJA,ACIA,KDJA,CJEM,AIFN,ACIM,CJKC,AILA,CAAD,CAAN,CJKE,CAAS,CDPC,AKEA,GLFG,AIFf,CAAA,ACIgB,CJKd,CAAgB,EDPE,EIFpB,CHSuB,AILP,CJKQ,ADPT,AKEC,CJKd,ADPuB,AIFzB,EHS2B,CDPZ,CAAb,AKEU,EAAZ,CJKgC,CAAC,CAA/B,GGTF;AHUE,ADPA,AIFA,ACIH,SJKQ,EDPE,AIFA,CHSP,CAAS,GGTF,CJEP,AIFO,EHSP,CAAgB,AGTT,CAAI,EHSQ,CAAC,CAApB,CGTgB,CHSO,AGThB,EAAY,CHSO,AGTN,CHSO,AGTpB,CHSP,CGTuB,CAAhB,EAAmB,CAAnB,EAAsB,EAAA,CAAA,MAAA,CAAO,KAA7B,CAAP;AHUA,ADPD,AIFA,GJLD,AIGA,MHWO,GAAL,CAAS,MAAT;AACD,AILH,GJAE,GIAF,CAAA,IAAA,CAAK,YAAA;ALFH,AIFA,ACKA,ELHA,AIFA,ACKA,KDLA,CAAA,CCKA,CAAA,ELHA,CAAA,GKGA,CDLA,ACKO,CDLP,IJEA,AKGA,CLHA,CIFA,GAAA,EJEA,GAAA,OIFA,GJEO,CAAP,EAAgB;ACQhB,ADPE,AIFA,ACMF,EJGA,AIHA,MJGA,ADPQ,CCOR,ADPS,AKIT,CAAA,CDNS,CJEG,IIFH,ACMT,CLJiB,AIFR,ACMF,CJGP,CAAA,CGTS,CAAI,GHSb,ADPE,CKIF,CDNkB,ACOhB,CJEF,AGTS,EAAY,CAAC,CAAb,EAAgB,CAAhB,EAAmB,EAAA,CHS5B,AGT4B,MAAA,CAAO,MAA1B,EAAkC,CAAlC,CAAP;AHUA,ADPA,AIFD,ACMG,GDRJ,CCQI,CAAC,EAAE,EJGA,AIHE,CAAC,CLJD,CCOP,CAAS,ADPA,CAAC,CAAC,CAAD,AKIL,CLJI,CKIT,ELJgB,CAAC,CCOjB,ADPkB,CCOC,ADPF,CCOjB,ADPO,ECOe,CAAtB,CDPyB,CCOA,ADPC,CAAC,CAAD,CAAD,ECOK,CDPE,CAAC,CAAC,CAAD,CCOjC,ADPwB,ECOa,CDPG,CAAxC,GCO0C,MAA1C;AACD,ADPA,AKGmB,GJEpB,ADRA,CKMoB,CAAC,EAAE,EAAE,CAAC,MAAH;ADLvB,ACKE,EDLF,CCIA,EAEE,EDNF,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AHUF,ADPE,AIFE,ACKE,ELHJ,EKGI,CAAC,EAAE,CDLD,CHSR,AIJW,CAAC,ELHV,CAAA,AIFE,EHSJ,CIJS,EAAL,ILHF,CAAA,KAAA,GAAA,UAAM,MAAN,EAAwB,MAAxB,EAAsC;ACxBxC,ADyBI,AIFA,ACIkB,CJ3BtB,EAAA,CI2BsB,CAAC,EAAE,CLFf,AIFF,CCImB,CAAC,GLFb,AIFF,GJEK,AKEO,EDJjB,GJEe,EIFA,CAAnB,EJEc,AIFQ,CJEG,IIFE,EJEb,CAAd,AIF8B,OAAR,CAAtB,KACK,KAAK,GAAG,OAAR;AJEL,AKCA,GAFF,KLCQ,KAAK,GAAG,MAAM,GAAG,KAAvB;AC1BS,AGyBT,IAAA,EAAA,CHzBS,AGyBT,CHzBS,KGyBT,CHzBS,AGyBF,GHzBE,MAAA,AGyBT,CAAiB;AJEjB,AIFmB,ACIrB,MDJqB,CAAC,ACIJ,ELFX,AIFiB,ECIN,ELFP,AKEO,CLFN,AIFiB,ECIX,CLFH,AKEG,CLFhB,CKEgB,CLFA,AIFM,CJEL,CIFA,EJEG,GKEJ,ELFS,CKET,MLFI,AKEtB,CLFmC,CKEjB,EAAA,GLFhB,AKEgB,ELFyB,CAAC,EAA1C,EAA8C,CKE9B,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAA0B;ALDtB,AIHmC,ACIlC,MDJkC,CAAC,CCI/B,CDJiC,EJGjC,EKCK,CDJiC,ECIjC,ELDV,CAAa,CAAb,AIHsC,ICI5B,CLDS,AKCT,EAAA,CAAT,ELDuB,GAAG,MAAM,CAAC,CAAD,CAAd,GAAoB,KAAK,YAA5C;AACD,AIJgB,ACKjB,IAAA,CDLA,EAAyD,ECKpD,CAAC,EDLN,EAAgE,ACKhE,CDLA,EAAmE,IAAnE;AJKD,AIJA,ACKA,GLPD,AIHA;;AJUF,AIJA,ACKE,OAAkB,ELDpB,AIJA,ECKoB,EAAA,CDLpB,ECKoB,CAAA,ELDpB,AKCoB,QAAA,GAAA,MAAlB,EAAkB,EAAA,GAAA,QAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAA0B;ALlC5B,AIKA,AC6BO,CLlCP,AIKA,EJLA,AIKA,KC6BW,KAAK,GAAA,QAAA,CAAA,EAAA,CAAT;AACH,QAAM,QAAM,GAAG,CAAC,KAAK,CAAC,CAAP,EAAU,KAAK,CAAC,CAAhB,EAAmB,IAAnB,CAAf;ALnCS,AIKA,AC+BT,OLpCS,AIKA,CJLA,AIKA,AC+BH,KD/BG,GAAA,AC+BG,ELpCH,CKoCM,ELpCN,AIKA,GC+BW,CAAC,KAArB,CLpCS;AKqCT,QAAM,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,QAAZ,CAAd;AACA,QAAI,KAAK,GAAA,KAAA,CAAT;AACA,QAAI,KAAK,KAAK,QAAd,EAAsB,KAAK,GAAG,aAAR,CAAtB,KACK,KAAK,GAAG,WAAR;AACL,IAAA,OAAA,CAAA,MAAA,CAAO,SAAP,CAAiB;AAAE,MAAA,CAAC,EAAE,KAAK,CAAC,MAAN,EAAL;AAAqB,MAAA,CAAC,EAAE,KAAK,CAAC,MAAN;AAAxB,KAAjB,EAA2D,KAA3D,EAAkE,CAAlE;AACD;;AAED,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAD,CAAvB;AACA,MAAM,MAAM,GAAG,CAAC,QAAQ,CAAC,CAAV,EAAa,QAAQ,CAAC,CAAtB,EAAyB,IAAzB,CAAf;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAxB;AACA,EAAA,KAAK,CAAC,KAAN,CAAY,MAAZ,EAAoB,MAApB;AACA,MAAM,EAAE,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,CAAC,CAAX,EAAc,KAAK,CAAC,MAAN,CAAa,CAAC,CAAd,CAAd,CAAX;AACA,MAAM,EAAE,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,CAAV,EAAa,KAAK,CAAC,MAAN,CAAa,CAAb,CAAb,CAAX;AACA,EAAA,OAAA,CAAA,MAAA,CAAO,QAAP,CACE;AAAE,IAAA,CAAC,EAAE,EAAE,CAAC,MAAH,EAAL;AAAkB,IAAA,CAAC,EAAE,EAAE,CAAC,MAAH;AAArB,GADF,EAEE;AAAE,IAAA,CAAC,EAAE,EAAE,CAAC,MAAH,EAAL;AAAkB,IAAA,CAAC,EAAE,EAAE,CAAC,MAAH;AAArB,GAFF;AAIA,EAAA,KAAK;AACL,MAAI,KAAK,KAAK,MAAM,CAAC,MAArB,EAA6B,KAAK,GAAG,CAAR;AAC9B,CAhCD","file":"src.77de5100.js","sourceRoot":"../src","sourcesContent":["export const random = (min: number, max: number) => \n   Math.random() * (max - min) + min;\n\n","import { random } from \"./utils/random\";\n\nexport class Perceptron {\n  private weights: number[];\n  private learningRate: number;\n  constructor(n: number, lerningRate: number) {\n    this.learningRate = lerningRate;\n    this.weights = new Array(n);\n    for (let i = 0; i < this.weights.length; i++) {\n      this.weights[i] = random(-1, 1);\n    }\n  }\n  private sign(n: number) {\n    if (n < 0) return -1;\n    return 1;\n  }\n  guess(inputs: number[]) {\n    let sum = 0;\n    for (let i = 0; i < this.weights.length; i++) {\n      sum += inputs[i] * this.weights[i];\n    }\n    let output = this.sign(sum);\n    return output;\n  }\n  guessY(x: number) {\n    const w = this.weights;\n    return -(w[2] / w[1]) - (w[0] / w[1]) * x;\n  }\n  train(inputs: number[], target: number) {\n    const guess = this.guess(inputs);\n    const error = target - guess;\n    for (let i = 0; i < this.weights.length; i++) {\n      this.weights[i] += error * inputs[i] * this.learningRate;\n    }\n  }\n}\n","type Point = {\n  x: number;\n  y: number;\n};\nexport class Canvas {\n  ctx: CanvasRenderingContext2D;\n  canvas: HTMLCanvasElement;\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.canvas = document.querySelector(\"canvas\");\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.ctx = this.canvas.getContext(\"2d\");\n  }\n\n  drawPoint(p: Point, color: string, size: number = 6, stroke?: boolean) {\n    this.ctx.fillStyle = color;\n    this.ctx.beginPath();\n    this.ctx.arc(p.x, p.y, size, 0, 2 * Math.PI, true);\n    this.ctx.fill();\n    if (stroke) this.ctx.stroke();\n  }\n  drawLine(start: Point, end: Point) {\n    this.ctx.beginPath();\n    this.ctx.moveTo(start.x, start.y);\n    this.ctx.lineTo(end.x, end.y);\n    this.ctx.stroke();\n  }\n  clear() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n}\n","export const loop = (fn: () => void) => {\n  window.requestAnimationFrame(() => loop(fn));\n  fn();\n};\n","export const constrain: (n: number, low: number, high: number) => number = (\n  n,\n  low,\n  high\n) => Math.max(Math.min(n, high), low);\n\nexport const map: (\n  n: number,\n  start1: number,\n  stop1: number,\n  start2: number,\n  stop2: number,\n  withinBounds?: boolean\n) => number = (n, start1, stop1, start2, stop2, withinBounds) => {\n  const newval = ((n - start1) / (stop1 - start1)) * (stop2 - start2) + start2;\n  if (!withinBounds) {\n    return newval;\n  }\n  if (start2 < stop2) {\n    return constrain(newval, start2, stop2);\n  } else {\n    return constrain(newval, stop2, start2);\n  }\n};\n","import { random } from \"./utils/random\";\nimport { Canvas } from \"./Canvas\";\nimport { f, canvas } from \".\";\nimport { map } from \"./utils/map\";\n\nconst COLOR_A = \"white\";\nconst COLOR_B = \"black\";\nexport class Point {\n  label: number;\n  canvas: Canvas;\n  x: number;\n  y: number;\n\n  constructor(x = random(-1, 1), y = random(-1, 1)) {\n    this.x = x;\n    this.y = y;\n    if (this.y < f(this.x)) this.label = -1;\n    else this.label = 1;\n  }\n  pixelX() {\n    return map(this.x, -1, 1, 0, canvas.width);\n  }\n  pixelY() {\n    return map(this.y, -1, 1, canvas.height, 0);\n  }\n  show() {\n    let color: string;\n    if (this.label === 1) color = COLOR_A;\n    else color = COLOR_B;\n    canvas.drawPoint({ x: this.pixelX(), y: this.pixelY() }, color, 6, true);\n  }\n}\n","import { Perceptron } from \"./Perceptron\";\nimport { Canvas } from \"./Canvas\";\nimport { loop } from \"./utils/loop\";\nimport { Point } from \"./Point\";\n\nconst WIDTH = 500;\nconst HEIGTH = 500;\n\nconst COLOR_ERROR = \"#cf3030\";\nconst COLOR_SUCCESS = \"#2ad55a\";\n\n// Line function\nexport const f: (x: number) => number = (x) => 0.89 * x + 0.2;\nconst BIAS = 1;\nexport const canvas = new Canvas(WIDTH, HEIGTH);\nconst points: Point[] = new Array(200);\nconst brain = new Perceptron(3, 0.005);\nlet count = 0;\n\nconst p1 = new Point(-1, f(-1));\nconst p2 = new Point(1, f(1));\n\nfor (let i = 0; i < points.length; i++) {\n  points[i] = new Point();\n}\n\nloop(() => {\n  canvas.clear();\n\n  canvas.drawLine(\n    { x: p1.pixelX(), y: p1.pixelY() },\n    { x: p2.pixelX(), y: p2.pixelY() }\n  );\n  for (let point of points) {\n    point.show();\n  }\n  for (let point of points) {\n    const inputs = [point.x, point.y, BIAS];\n    const target = point.label;\n    const guess = brain.guess(inputs);\n    let color: string;\n    if (guess === target) color = COLOR_SUCCESS;\n    else color = COLOR_ERROR;\n    canvas.drawPoint({ x: point.pixelX(), y: point.pixelY() }, color, 3);\n  }\n\n  const training = points[count];\n  const inputs = [training.x, training.y, BIAS];\n  const target = training.label;\n  brain.train(inputs, target);\n  const p3 = new Point(-1, brain.guessY(-1));\n  const p4 = new Point(1, brain.guessY(1));\n  canvas.drawLine(\n    { x: p3.pixelX(), y: p3.pixelY() },\n    { x: p4.pixelX(), y: p4.pixelY() }\n  );\n  count++;\n  if (count === points.length) count = 0;\n});\n"]}